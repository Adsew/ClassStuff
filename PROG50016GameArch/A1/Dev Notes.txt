Notes for game
WEapons have a level and can kill monsters based on being a certain level or higher. Maybe allow the weapons to have you lose less health when ifhgitng the enemies.

Multiple endings:
Need to get sacred water to defeat final boss, die ending
If you have congealed blood when you kill final boss you get userper ending


IMplementation:

Map moving have the map dynamically load zones. A zone is loaded from the xml file and deloaded when moving to another zone in the xml file. Have a list of directions you can go in. like with the parser maybe a hashmap of directions can be used each with the name of a zone they transfer to associated and that zone name is the loading name in the xml file to laod that zone. This way we can  expand the locaions to move to using new names as keys given by the zone data

For saving, save an xml with zone changes. If something changed in that zone store the changes in an xml that when that zone is loaded, check the save and implement the changes. The save file will also have the players inventory and location at the time as the first elemsnt.

Game engine wil be stand alone. THe map will control everyhting. The engine will simply handle the flow of informaiton.

a locked bool can be used to determine if a direction or box etc requires an item, then an if statement can check agains a string or int ID stored in the xml of what is needed to open or pass the locked thing. Allows for abstracting data from the engine.

For dying: corpse object derived from player object allows it to have an inventory which can be reclaimed.

For zone, when calling the function with the data, in the data file levels could have loaded response for each key item in the scene. For example, a game object rock in the scene that can be interacted with using the commands could have responses to specific commands, else default to a general startement. EG. Use rock, search file for rock->use response which gives a string, why would you try to use a rock? What are you thinking? But if its dumb, and doesnt need a special response like that default to a Cannot use [rock].

Consider later creating a header or singleton where a file with codes is loaded for the game if data security in this area is neccessary. Eg what codes mean what i dunno

In the file for zone data, items can hold a list for location directions or boxzes they effect and while loading we can check if the locations in the list exist (which they should otherwise dont write them) and check in the map and set it to false if it exists. Allows us to lock of zones until interactables are moved. As a game object, we can set what moves them and remember what location they effect. This will also naturally help saving, as not saving the interactable when gone will stop it from falsing an opened direction

3 types of game objects, monsters, interactables, and items. Items have an extra pickup function, interactables can lock other items in the scene off, and monsters can be attacked but cant  be used or searched until dead.

Have items file as well to load and produce items by ID

at end of zone update delete all items that need to be deleted

items and stuff might need a render message to play wit hthe zone description to help say what is and isnt there anymore

when performing use with the with item (2nd arg) is what determines what happens

make a settings file load first with the other file locations inside it. Keep map of asset files and make filesystem completely modular by saying functions like get next attribute with string name etc.

initializers for systems return bool for verification

ask if loading all files at start is a good option