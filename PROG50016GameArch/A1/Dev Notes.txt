Notes for game
WEapons have a level and can kill monsters based on being a certain level or higher. Maybe allow the weapons to have you lose less health when ifhgitng the enemies.

Multiple endings:
Need to get sacred water to defeat final boss, die ending
If you have congealed blood when you kill final boss you get userper ending


IMplementation:
Parser using a map where each key would be a use word and returns actions that can be performed?

input->parsed->some kind of determiner checks with zone-> zone implements changes and sets outputs->render.renderall()->zone.render
Nothing else really needs to render

Map moving have the map dynamically load zones. A zone is loaded from the xml file and deloaded when moving to another zone in the xml file. Have a list of directions you can go in. like with the parser maybe a hashmap of directions can be used each with the name of a zone they transfer to associated and that zone name is the loading name in the xml file to laod that zone. This way we can  expand the locaions to move to using new names as keys given by the zone data

For saving, save an xml with zone changes. If something changed in that zone store the changes in an xml that when that zone is loaded, check the save and implement the changes. The save file will also have the players inventory and location at the time as the first elemsnt.

Game engine wil be stand alone. THe map will control everyhting. The engine will simply handle the flow of informaiton.

a locked bool can be used to determine if a direction or box etc requires an item, then an if statement can check agains a string or int ID stored in the xml of what is needed to open or pass the locked thing. Allows for abstracting data from the engine.

For dying: corpse object derived from player object allows it to have an inventory which can be reclaimed.


INPUT: have a map where we enter first word into the map and that will return something valid and that will confirm the input is good and it will be formated into keywords in a list which will be returned to the game loop. Game loop will send it to the update of the running "something" that acts as the inbetween with the zone and then it will check this list in with the zone and the zone will handle the list to see if the valid options are valid in the contrext of the zone. So picture go east. Converts it into a list where Go is a valid word and east is therefor the content and returns this to the loop. Since nothing would follow the content, we assuime even with spaces, that the content is all one item. With Use we may have a following keyword with, so search through random words until we find with and organize the words into a list based on that.

Inpout -> gameloop -> handler thing -> zone -> sets up render stuff -> loop -> renderer renders stuff that was set up -> repeat

For zone, when calling the function with the data, in the data file levels could have loaded response for each key item in the scene. For example, a game object rock in the scene that can be interacted with using the commands could have responses to specific commands, else default to a general startement. EG. Use rock, search file for rock->use response which gives a string, why would you try to use a rock? What are you thinking? But if its dumb, and doesnt need a special response like that default to a Cannot use [rock].

Consider later creating a header or singleton where a file with codes is loaded for the game if data security in this area is neccessary. Eg what codes mean what i dunno